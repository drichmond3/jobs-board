{"version":3,"sources":["home/index.tsx","job-board/details.tsx","service/service.tsx","service/search-context.tsx","job-board/search-criteria.tsx","synthetic-button.tsx","Utils.tsx","job-board/jobs-list.tsx","job-board/application/index.tsx","job-board/board-content.tsx","images/Logo.svg","job-board/index.tsx","App.tsx","index.tsx"],"names":["Home","props","className","onClick","changeCategory","categories","map","category","index","renderCategory","key","callback","content","name","Button","variant","Details","title","job","description","parentClass","Card","Title","Header","Body","icon","faBook","size","Footer","showApplication","ENDPOINTS","process","id","searchText","categoryIds","positionTypeIds","pageNumber","resultsPerPage","response","length","categoryId","encodeURIComponent","join","positionTypeId","useFetch","url","requestCount","useRef","useState","reloadFlag","setReloadFlag","forceReload","useCallback","data","headers","error","loading","requestId","current","responseData","setResponseData","useEffect","requestIndex","old","fetch","then","ok","json","parsedObject","catch","finally","getIds","defaultContextValue","selectedCategories","selectedPositionTypes","jobPostings","tmpSearchText","toggleCategory","Error","setCategory","cat","togglePositionType","positionType","clearPositionTypes","updateSearchText","text","isLoadingJobs","searchResultCount","loadJobPostingsError","isEndOfJobsStream","loadMoreJobs","SearchContext","React","createContext","SearchProvider","setSelectedCategories","setSelectedPositionTypes","setTmpSearchText","setSearchText","positionTypes","safeSearchCriteria","setSafeSearchCriteria","lastRequestId","setLastRequestId","jobs","setJobs","fetchState","setFetchState","j","timerId","setTimeout","clearTimeout","isEndOfStream","useLoadJobPostings","maxResultCount","jobPostingsHeader","debouncedSetSearchText","debounce","debounceInMilliseconds","toggle","entry","list","find","forEach","existingEntry","push","get","Number","parseInt","Provider","value","updatedCategories","updatedPositionTypes","updatedSelectedCategories","children","SearchCriteria","useContext","border","onSubmit","e","preventDefault","Container","fluid","Row","Col","lg","xs","faSearch","placeholder","onChange","target","renderDropdown","loadCategoriesError","forceCategoriesReload","renderSelectedItems","loadPositionTypesError","forcePositionTypesReload","dataList","faTimes","rawTitle","selectedData","retryLoad","hasData","textClass","safeDataList","Dropdown","Toggle","faChevronDown","Menu","Alert","filter","renderDropdownItem","selectedItems","selected","Boolean","item","Item","active","onSelect","SyntheticButton","hover","setHover","click","setClick","additionalClasses","hoverClass","baseAdditionalProps","onMouseDown","onMouseEnter","onMouseLeave","onMouseUp","clickClass","Children","child","additionalProps","isValidElement","cloneElement","getDisplayAge","ageInHours","Math","round","JobsList","loadIndicatorRef","ref","load","isIntersecting","observer","IntersectionObserver","setInterval","observe","disconnect","useOnScreen","Array","fill","renderJob","setSelectedJob","setSelectedDetailsJob","offset","isLoading","selectFunc","selectDetailsFunc","delayClass","imgSrc","logo_file_name","undefined","imgAlt","company","age","age_in_hours","job_position_types","loadingClass","type","stopPropagation","Application","errorMessage","setErrorMessage","startApplication","renderContent","details","back","faArrowLeft","src","alt","faClock","faSearchLocation","city","state","faGlobe","industry","faCalendarDay","detail","faSpinner","pulse","BoardContent","selectedJob","additionalDetails","isDetailsLoading","containerClass","detailsJob","JobBoard","setRawDetailsJob","isShowApplication","setShowApplication","setDetailsJob","showAppClass","renderHeader","isSelectedJob","headerClass","Logo","App","activePage","setActivePage","debouncedScrollToActivePage","scrollToElementId","elementId","scroller","scrollTo","duration","smooth","window","addEventListener","removeEventListener","scrollToBoard","topCategories","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38507a63.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport { Category } from \"../service/JobTypes\";\r\nimport \"./home.css\";\r\n\r\ninterface Props {\r\n  categories: Category[],\r\n  changeCategory: (category: Category | null) => void\r\n}\r\n\r\nexport default function Home(props: Props) {\r\n\r\n  return (\r\n    <div className=\"home-container user-select-none\">\r\n      <header className=\"home-header\">\r\n        <div>\r\n          <h1>Mock Jobs Board</h1>\r\n          <p>Your next career move is just a few clicks away</p>\r\n        </div>\r\n      </header>\r\n      <div>\r\n        <button onClick={() => props.changeCategory(null)}>Start</button>\r\n      </div>\r\n      <div className=\"home-category-container\">\r\n        {props.categories.map((category, index) => renderCategory(index, category, props.changeCategory))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst renderCategory = (key: number, category: Category, changeCategory: Props[\"changeCategory\"]) => {\r\n  let callback = (category == null) ? () => { } : () => changeCategory(category);\r\n  let content = (category == null) ? \"...\" : category.name;\r\n  return (\r\n    <Button key={key} variant=\"outline-secondary\" onClick={callback}>{content}</Button>\r\n  )\r\n}","import React from \"react\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBook } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { JobPosting } from \"../service/JobTypes\";\r\n\r\ninterface Props {\r\n  job: JobPosting | null,\r\n  showApplication: () => void\r\n}\r\n\r\nexport default function Details(props: Props) {\r\n  let title = props.job ? props.job.title : \"\";\r\n  let description = props.job ? props.job.description : \"click on a job posting to display more details...\";\r\n  let parentClass = props.job ? \"\" : \" empty\";\r\n  return (\r\n    <div>\r\n      <div className={\"job-board-details-content \" + parentClass}>\r\n        <Card>\r\n          <Card.Title>{title && <Card.Header>{title}</Card.Header>}</Card.Title>\r\n          <Card.Body><FontAwesomeIcon icon={faBook} size=\"2x\" /><span> {description}</span></Card.Body>\r\n          {props.job && <Card.Footer className=\"text-center\"><Button onClick={() => props.showApplication()}>Apply!</Button></Card.Footer>}\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useCallback, useEffect, useRef, useState } from \"react\";\r\n\r\nimport { Category, JobPosting, JobPostingDetails, PositionType } from \"./JobTypes\";\r\n\r\nexport const ENDPOINTS: {\r\n  getCategories: () => string,\r\n  getPositionTypes: () => string,\r\n  getJobPostingDetails: (jobPostingId: number) => string,\r\n  getJobPostings: (searchText: string, categoryIds: number[], positionTypeIds: number[], pageNumber: number, resultsPerPage: number) => string\r\n} = {\r\n  getCategories: () => `${process.env.REACT_APP_SERVICE_URL}/job_categories?_sort=popularity&_order=desc&_limit=100`,\r\n  getPositionTypes: () => `${process.env.REACT_APP_SERVICE_URL}/job_position_types?_sort=name&_order=asc&_limit=100`,\r\n  getJobPostingDetails: (id: number) => `${process.env.REACT_APP_SERVICE_URL}/job_posting_additional_details?job_posting_id=${id}&_limit=1000`,\r\n  getJobPostings: (searchText, categoryIds, positionTypeIds, pageNumber, resultsPerPage) => {\r\n    let response = `${process.env.REACT_APP_SERVICE_URL}/job_postings?_expand=job_categories&_expand=job_position_types&_page=${pageNumber}&_limit=${resultsPerPage}`;\r\n    if (categoryIds && categoryIds.length > 0) {\r\n      response += categoryIds.map((categoryId) => `&job_categoriesId=${encodeURIComponent(categoryId)}`).join(\"\");\r\n    }\r\n    if (positionTypeIds && positionTypeIds.length > 0) {\r\n      response += positionTypeIds.map((positionTypeId) => `&job_position_typesId=${encodeURIComponent(positionTypeId)}`).join(\"\");\r\n    }\r\n    if (searchText) {\r\n      response += `&q=${encodeURIComponent(searchText)}`;\r\n    }\r\n    return response;\r\n  }\r\n}\r\n\r\ninterface UseFetchResponse<T> {\r\n  data: T | null,\r\n  headers: Headers | null,\r\n  error: Error | null,\r\n  loading: boolean,\r\n  forceReload: () => void\r\n}\r\n\r\ninterface JobPostingsResponse extends UseFetchResponse<JobPosting[]> {\r\n  loadMoreJobs: () => void,\r\n  isEndOfStream: boolean\r\n}\r\n\r\nexport function useLoadCategories(): UseFetchResponse<Category[]> {\r\n  return useFetch<Category[]>(ENDPOINTS.getCategories());\r\n}\r\n\r\ninterface FetchingState {\r\n  QUEUED: number,\r\n  FETCHING: number,\r\n  STORING: number,\r\n  FINISHED: number,\r\n  EMPTY: number\r\n}\r\n\r\nexport function useLoadJobPostings(searchText: string, categories: Category[] | null, positionTypes: PositionType[] | null, resultsPerPage: number): JobPostingsResponse {\r\n  let [safeSearchCriteria, setSafeSearchCriteria] = useState<{ pageNumber: number, searchText: string, categories: Category[] | null, positionTypes: PositionType[] | null, resultsPerPage: number }>(\r\n    { pageNumber: 1, searchText, categories, positionTypes, resultsPerPage }\r\n  );\r\n  let [lastRequestId, setLastRequestId] = useState<number>(-1);\r\n  let response = useFetch<JobPosting[]>(ENDPOINTS.getJobPostings(safeSearchCriteria.searchText, getIds(safeSearchCriteria.categories), getIds(safeSearchCriteria.positionTypes), safeSearchCriteria.pageNumber, safeSearchCriteria.resultsPerPage));\r\n  let [jobs, setJobs] = useState<JobPosting[] | null>(null);\r\n  let [fetchState, setFetchState] = useState<keyof FetchingState>(\"FETCHING\");\r\n\r\n  //QUEUED -> FETCHING\r\n  useEffect(() => {\r\n    if (fetchState === \"QUEUED\") {\r\n      setSafeSearchCriteria((old) => {\r\n        return { ...safeSearchCriteria, pageNumber: (old.pageNumber + 1) }\r\n      });\r\n      setFetchState(\"FETCHING\");\r\n    }\r\n  }, [fetchState, safeSearchCriteria]);\r\n\r\n  //FETCHING -> STORING adds newly loaded lobs to the list of jobs we're displaying.\r\n  useEffect(() => {\r\n    if (response.data && fetchState === \"FETCHING\" && response.requestId > lastRequestId) {\r\n      setFetchState(\"STORING\");\r\n      setJobs(j => {\r\n        if (response.data && j) {\r\n          return [...j, ...response.data]\r\n        }\r\n        return response.data;\r\n      });\r\n      setLastRequestId(response.requestId);\r\n    }\r\n  }, [response.requestId]);\r\n\r\n  //STORING -> FINISHED\r\n  useEffect(() => {\r\n    const timerId = setTimeout(() => {\r\n      //otherwise we've started another request, and we don't want to wreck the state machine by changing its state.\r\n      if (fetchState === \"STORING\") {\r\n        if ((!response.data || response.data.length === 0) && !(response.error) && (!response.loading)) {\r\n          setFetchState(\"EMPTY\");\r\n        } else {\r\n          setFetchState(\"FINISHED\")\r\n        }\r\n      }\r\n    }, 1000);\r\n    return () => {\r\n      clearTimeout(timerId);\r\n    }\r\n  }, [lastRequestId, response.data, response.loading, response.error, fetchState]);\r\n\r\n  //FINISHED -> QUEUED\r\n  let loadMoreJobs = () => {\r\n    setFetchState((fetchState) => {\r\n      if (fetchState === \"FINISHED\") {\r\n        return \"QUEUED\"\r\n      }\r\n      return fetchState;\r\n    });\r\n  }\r\n\r\n  //ANY -> FETCHING :: BREAK DATA STREAM conditions. clears jobs list anytime we change our search criteria.\r\n  useEffect(() => {\r\n    setJobs([]);\r\n    setSafeSearchCriteria({ pageNumber: 1, searchText, categories, positionTypes, resultsPerPage });\r\n    setFetchState(\"FETCHING\"); //circumvents the request 1 page at a time state machine process.\r\n  }, [searchText, categories, positionTypes, resultsPerPage]);\r\n\r\n  return { data: jobs, headers: response.headers, error: response.error, loading: response.loading, forceReload: loadMoreJobs, loadMoreJobs, isEndOfStream: (fetchState === \"EMPTY\") }\r\n}\r\n\r\nexport function useLoadJobPostingDetails(id: number | undefined | null): UseFetchResponse<JobPostingDetails[]> {\r\n  const url = id ? ENDPOINTS.getJobPostingDetails(id) : null;\r\n  return useFetch<JobPostingDetails[]>(url);\r\n}\r\n\r\nexport function useLoadPositionTypes(): UseFetchResponse<PositionType[]> {\r\n  return useFetch<PositionType[]>(ENDPOINTS.getPositionTypes());\r\n}\r\n\r\ninterface RawFetchResponse<T> extends UseFetchResponse<T> {\r\n  requestId: number\r\n}\r\n/**\r\n * Makes a GET request to the specified url.\r\n * This implementation only cares about the most recent request sent. When a response is received, the return values are only updated if the request is the most recent request the client sent out. \r\n * If another more recent request is currently in flight, the current response will be ignored.\r\n * @param url the url to make a GET request to. A new request will be made anytime this value changes.\r\n * @returns the state of the most recent fetch request.\r\n */\r\nexport function useFetch<T>(url: string | null): RawFetchResponse<T> {\r\n  const requestCount = useRef<number>(0); //need a value we can modify, persists across re-renders, and doesn't cause a re-render on change to track concurrent request count.\r\n  const [reloadFlag, setReloadFlag] = useState<boolean>(false);\r\n  const forceReload = useCallback(() => setReloadFlag(true), []);\r\n  const [responseData, setResponseData] = useState<{ data: T | null, headers: Headers | null, error: Error | null, loading: boolean, requestId: number }>({ data: null, headers: null, error: null, loading: false, requestId: requestCount.current });\r\n  useEffect(() => {\r\n    if (reloadFlag) {\r\n      setReloadFlag(false);\r\n      return;\r\n    }\r\n    if (!url) {\r\n      return;\r\n    }\r\n    requestCount.current++;\r\n    let requestIndex = requestCount.current;\r\n    setResponseData(old => ({ ...old, loading: true, error: null }));\r\n    fetch(url).then((response: Response) => {\r\n      if (response.ok) {\r\n        response.json().then(\r\n          (parsedObject: T) => {\r\n            if (requestIndex === requestCount.current) {\r\n              setResponseData(old => ({ data: parsedObject, headers: response.headers, error: null, loading: false, requestId: requestCount.current }))\r\n            }\r\n          }\r\n        )\r\n      }\r\n    }).catch((error: Error) => {\r\n      setResponseData(old => ({ ...old, error: error }));\r\n    }).finally(() => {\r\n      if (requestIndex === requestCount.current) {\r\n        setResponseData(old => ({ ...old, loading: false }));\r\n      }\r\n    })\r\n  }, [url, reloadFlag])\r\n  return { data: responseData.data, headers: responseData.headers, error: responseData.error, loading: responseData.loading, forceReload: forceReload, requestId: responseData.requestId }\r\n}\r\n\r\n/**\r\n * Makes a GET request to the specified url and updates its state with every response received, regardless of the order the requests were sent/or received in. Use this when the client needs to be notified every time a response\r\n * is received, even if a more recent request has been sent and the current response could be considered stale.\r\n * However in the case of concurrent requests, the loading state will only be set to false once all requests have completed.\r\n * @param url the url to make a GET request to. A new request will be made anytime this value changes.\r\n * @returns \r\n */\r\nexport function useFetchIncludeAll<T>(url: string): UseFetchResponse<T> {\r\n  const [data, setData] = useState<T | null>(null);\r\n  const [headers, setHeaders] = useState<Headers | null>(null);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const requestMapRef = useRef<{ [name: string]: boolean }>({}); //need a value we can modify, persists across re-renders, and doesn't cause a re-render on change to track concurrent request count.\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [reloadFlag, setReloadFlag] = useState<boolean>(false);\r\n  const forceReload = useCallback(() => setReloadFlag(true), []);\r\n\r\n  useEffect(() => {\r\n    if (reloadFlag) {\r\n      setReloadFlag(false);\r\n      return;\r\n    }\r\n    requestMapRef.current[url] = true;\r\n    setLoading(true);\r\n    fetch(url).then((response: Response) => {\r\n      if (response.ok) {\r\n        response.json().then(\r\n          (parsedObject: T) => {\r\n            setData(parsedObject);\r\n            setHeaders(response.headers);\r\n            setError(null);\r\n          }\r\n        )\r\n      }\r\n    }).catch((error: Error) => {\r\n      setError(error);\r\n    }).finally(() => {\r\n      delete requestMapRef.current[url];\r\n      if (Object.keys(requestMapRef.current).length <= 0) {\r\n        setLoading(false);\r\n      }\r\n    })\r\n  }, [url, reloadFlag])\r\n  return { data, headers, error, loading: loading, forceReload }\r\n}\r\n\r\n\r\nlet getIds = (categories: { id: number }[] | null): number[] => {\r\n  return categories ? categories.map(category => category.id) : ([] as number[]);\r\n}","import React, { useState, useCallback } from \"react\";\r\nimport { Category, JobPosting, PositionType } from \"./JobTypes\";\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport { useLoadJobPostings } from \"./service\";\r\n\r\nexport interface ContextValue {\r\n  selectedCategories: Category[] | null,\r\n  selectedPositionTypes: PositionType[] | null,\r\n  jobPostings: JobPosting[] | null,\r\n  tmpSearchText: string,\r\n  toggleCategory: (category: Category) => void,\r\n  setCategory: (cat: Category | null) => void,\r\n  togglePositionType: (positionType: PositionType) => void,\r\n  clearPositionTypes: () => void,\r\n  updateSearchText: (text: string) => void,\r\n  isLoadingJobs: boolean,\r\n  searchResultCount: number,\r\n  loadJobPostingsError: Error | null,\r\n  isEndOfJobsStream: boolean,\r\n  loadMoreJobs: () => void\r\n}\r\n\r\nlet defaultContextValue: ContextValue = {\r\n  selectedCategories: null,\r\n  selectedPositionTypes: null,\r\n  jobPostings: null,\r\n  tmpSearchText: \"\",\r\n  toggleCategory: (category: Category) => { throw Error(\"Search Context not initialized\") },\r\n  setCategory: (cat: Category | null) => { throw Error(\"Search Context not initialized\") },\r\n  togglePositionType: (positionType: PositionType) => { throw Error(\"Search Context not initialized\") },\r\n  clearPositionTypes: () => { throw Error(\"Search Context not initialized\") },\r\n  updateSearchText: (text: string) => { throw Error(\"Search Context not initialized\") },\r\n  isLoadingJobs: false,\r\n  searchResultCount: 0,\r\n  loadJobPostingsError: null,\r\n  isEndOfJobsStream: false,\r\n  loadMoreJobs: () => { throw Error(\"Search Context not initialized\") }\r\n}\r\n\r\ninterface Props {\r\n  children: React.ReactNode,\r\n  maxResultCount: number\r\n  debounceInMilliseconds: number\r\n}\r\n\r\nexport const SearchContext = React.createContext<ContextValue>(defaultContextValue);\r\n\r\nexport function SearchProvider(props: Props) {\r\n  let [selectedCategories, setSelectedCategories] = useState<Category[] | null>(null);\r\n  let [selectedPositionTypes, setSelectedPositionTypes] = useState<PositionType[] | null>(null);\r\n  let [tmpSearchText, setTmpSearchText] = useState<string>(\"\");\r\n  let [searchText, setSearchText] = useState<string>(\"\");\r\n  let { data: jobPostings, error: loadJobPostingsError, headers: jobPostingsHeader, loading: isLoadingJobs, loadMoreJobs, isEndOfStream } = useLoadJobPostings(searchText, selectedCategories, selectedPositionTypes, props.maxResultCount);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  let debouncedSetSearchText = useCallback(debounce((text: string) => setSearchText(text), props.debounceInMilliseconds), []);\r\n\r\n  let updateSearchText = (text: string) => {\r\n    setTmpSearchText(text);\r\n    debouncedSetSearchText(text);\r\n  }\r\n\r\n  interface Unique {\r\n    id: number\r\n  }\r\n\r\n  const toggle = function <T extends Unique>(entry: T | null, list: T[] | null): (T[] | null) {\r\n    if (entry == null) {\r\n      return null;\r\n    }\r\n    if (!(list?.find(current => current.id === entry.id))) {\r\n      return (list == null) ? [entry] : [...list, entry];\r\n    }\r\n    else {\r\n      let response = [] as T[];\r\n      list.forEach((existingEntry: T) => {\r\n        if (existingEntry.id !== entry.id) {\r\n          response.push(existingEntry);\r\n        }\r\n      });\r\n      return response;\r\n    }\r\n  }\r\n\r\n  const toggleCategory = (entry: Category | null) => {\r\n    let updatedCategories = toggle(entry, selectedCategories);\r\n    setSelectedCategories(updatedCategories);\r\n  }\r\n\r\n  const togglePositionType = (entry: PositionType | null) => {\r\n    let updatedPositionTypes = toggle(entry, selectedPositionTypes);\r\n    setSelectedPositionTypes(updatedPositionTypes);\r\n  }\r\n\r\n  const setCategory = (cat: Category | null) => {\r\n    if (cat === null) {\r\n      setSelectedCategories(null);\r\n    }\r\n    else {\r\n      if (!(selectedCategories?.find(current => current.id === cat.id))) {\r\n        let updatedSelectedCategories = selectedCategories == null ? [cat] : [...selectedCategories, cat];\r\n        setSelectedCategories(updatedSelectedCategories);\r\n      }\r\n    }\r\n    setSelectedPositionTypes(null);\r\n  }\r\n\r\n  const clearPositionTypes = (): void => {\r\n    setSelectedPositionTypes(null);\r\n  }\r\n\r\n  let searchResultCount = jobPostingsHeader?.get(\"X-Total-Count\") || 0;\r\n  searchResultCount = Number.parseInt(searchResultCount + \"\");\r\n\r\n  return (\r\n    <SearchContext.Provider value={{ selectedCategories, selectedPositionTypes, jobPostings, tmpSearchText, toggleCategory, togglePositionType, setCategory, clearPositionTypes, updateSearchText, isLoadingJobs, searchResultCount, loadJobPostingsError, loadMoreJobs, isEndOfJobsStream: isEndOfStream }}>\r\n      {props.children}\r\n    </SearchContext.Provider>\r\n  )\r\n}","import React, { useContext } from \"react\";\r\nimport { Card, Col, Container, Row, Dropdown, Alert } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch, faChevronDown, faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Category, PositionType } from \"../service/JobTypes\";\r\nimport { SearchContext, ContextValue } from \"../service/search-context\";\r\n\r\ninterface Props {\r\n  categories: Category[] | null,\r\n  positionTypes: PositionType[] | null,\r\n  loadCategoriesError: Error | null,\r\n  loadPositionTypesError: Error | null,\r\n  forceCategoriesReload: () => void,\r\n  forcePositionTypesReload: () => void\r\n}\r\n\r\nexport default function SearchCriteria(props: Props) {\r\n  const { selectedCategories, selectedPositionTypes, tmpSearchText, toggleCategory, togglePositionType, updateSearchText, searchResultCount } = useContext<ContextValue>(SearchContext);\r\n  return (\r\n    <div id=\"job-board-search-container\" className=\"job-board-search-container\">\r\n      <div className=\"job-board-search-content\">\r\n        <Card border=\"dark\">\r\n          <form className=\"text-center pt-3 pb-3\" onSubmit={(e) => e.preventDefault()}>\r\n            <Container fluid>\r\n              <Row>\r\n                <Col lg={12} xs={12} className=\"p-0\">\r\n                  <FontAwesomeIcon icon={faSearch} className=\"search-icon\" />\r\n                  <input placeholder=\"Search...\" value={tmpSearchText} onChange={(e) => updateSearchText(e.target.value)}></input>\r\n                  <div className=\"search-info d-none d-sm-block\">\r\n                    <div>{searchResultCount} results</div>\r\n                  </div>\r\n                </Col>\r\n                <Col lg={12} xs={6} id=\"job-board-category-dropdown\">\r\n                  {renderDropdown(\"Categories\", props.categories, toggleCategory, selectedCategories, props.loadCategoriesError, props.forceCategoriesReload)}\r\n                  {renderSelectedItems(selectedCategories, toggleCategory)}\r\n                </Col>\r\n                <Col lg={12} xs={6} id=\"job-board-tag-dropdown\">\r\n                  {renderDropdown(\"Tags\", props.positionTypes, togglePositionType, selectedPositionTypes, props.loadPositionTypesError, props.forcePositionTypesReload)}\r\n                  {renderSelectedItems(selectedPositionTypes, togglePositionType)}\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </form>\r\n        </Card>\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nconst renderSelectedItems = (dataList: Category[] | null, toggle: (c: Renderable) => void): JSX.Element[] => {\r\n  if (dataList) {\r\n    return (\r\n      dataList.map(data => {\r\n        return (\r\n          <Card key={data.id} className=\"d-none d-lg-inline job-board-search-selections user-select-none\" onClick={() => toggle(data)}>\r\n            <span><FontAwesomeIcon icon={faTimes} /></span>\r\n            <span className=\"content\">{data.name}</span>\r\n          </Card>\r\n        )\r\n      })\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      []\r\n    )\r\n  }\r\n}\r\n\r\nconst renderDropdown = (rawTitle: string, dataList: Category[] | PositionType[] | null, toggle: ((c: Category) => void) | ((c: PositionType) => void), selectedData: Category[] | PositionType[] | null, error: Error | null, retryLoad: () => void): JSX.Element => {\r\n\r\n  const hasData = dataList && dataList.find(data => data);\r\n  let textClass = (selectedData && selectedData.length) ? \"text-primary\" : \"\";\r\n  let name = hasData ? rawTitle : \"Loading...\";\r\n  let safeDataList = dataList || [];\r\n  if (!error) {\r\n    return (\r\n      <Dropdown>\r\n        <Dropdown.Toggle>\r\n          <FontAwesomeIcon icon={faChevronDown} />\r\n          <span className={textClass}> {name}</span>\r\n        </Dropdown.Toggle>\r\n        {hasData && (\r\n          <Dropdown.Menu>\r\n            {safeDataList.filter(data => data).map((data) => renderDropdownItem(data, selectedData, toggle))}\r\n          </Dropdown.Menu>)}\r\n      </Dropdown>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <Dropdown>\r\n        <Dropdown.Toggle>\r\n          <FontAwesomeIcon icon={faChevronDown} />\r\n          <span className={textClass}> {rawTitle}</span>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Alert variant=\"danger\" onClick={() => retryLoad()}><span>There was an issue loading available options.</span><br></br><b>Click to retry</b></Alert>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    )\r\n  }\r\n}\r\n\r\ninterface Renderable {\r\n  id: number,\r\n  name: string\r\n}\r\nconst renderDropdownItem = function (category: Renderable, selectedItems: Renderable[] | null | undefined, toggle: (selected: Renderable) => void): JSX.Element {\r\n  let selected: boolean = false;\r\n  if (selectedItems) {\r\n    selected = Boolean(selectedItems.find(item => item.id === category.id));\r\n  }\r\n  return (\r\n    <Dropdown.Item active={selected} key={category.id} onSelect={(() => toggle(category))}>\r\n      {selected && <FontAwesomeIcon icon={faTimes} />} {category.name}\r\n    </Dropdown.Item>\r\n  )\r\n}\r\n","import React, { ReactNode, useState } from \"react\";\r\n\r\ninterface Props {\r\n  hoverClass?: string,\r\n  clickClass?: string,\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function SyntheticButton(props: Props): JSX.Element {\r\n  let [hover, setHover] = useState<boolean>(false);\r\n  let [click, setClick] = useState<boolean>(false);\r\n\r\n  let additionalClasses = \" \";\r\n  additionalClasses += hover ? (props.hoverClass ?? \"\") : \"\";\r\n  additionalClasses += click ? (props.clickClass ?? \"\") : \"\";\r\n\r\n  let baseAdditionalProps = {\r\n    onMouseDown: () => {\r\n      setClick(true);\r\n      setHover(false);\r\n    },\r\n    onMouseEnter: () => {\r\n      setHover(true);\r\n    },\r\n    onMouseLeave: () => {\r\n      setClick(false);\r\n      setHover(false);\r\n    },\r\n    onMouseUp: () => {\r\n      setHover(true);\r\n      setClick(false);\r\n    },\r\n    className: additionalClasses\r\n  }\r\n\r\n  if (props.children != null) {\r\n    return <>{\r\n      React.Children.map(props.children, child => {\r\n        let additionalProps = { ...baseAdditionalProps }\r\n        if (React.isValidElement(child)) {\r\n          additionalProps.className = child.props.className + additionalClasses;\r\n          return React.cloneElement(child, additionalProps)\r\n        }\r\n        else {\r\n          return React.cloneElement(<span>{child}</span>, baseAdditionalProps)\r\n        }\r\n      })\r\n    }</>\r\n  }\r\n  return <></>;\r\n}","export const getDisplayAge = (ageInHours: number): string => {\r\n  const HOURS_PER_MONTH = 24 * 365 / 12;\r\n  if (ageInHours < 24) {\r\n    return `${ageInHours} Hours`;\r\n  }\r\n  else if (ageInHours < HOURS_PER_MONTH) {\r\n    return `${Math.round(ageInHours / 24)} Days`;\r\n  }\r\n  else {\r\n    return `${Math.round(ageInHours / HOURS_PER_MONTH)} Months`\r\n  }\r\n}","import React, { ReactElement, useContext, useEffect, useRef } from \"react\";\r\nimport { Button, Card, Alert } from \"react-bootstrap\";\r\n\r\nimport SyntheticButton from \"../synthetic-button\";\r\nimport { JobPosting } from \"../service/JobTypes\";\r\nimport { SearchContext, ContextValue } from \"../service/search-context\";\r\nimport { getDisplayAge } from \"../Utils\";\r\n\r\ninterface Props {\r\n  setSelectedJob: (job: JobPosting | null) => void,\r\n  setSelectedDetailsJob: (job: JobPosting | null) => void,\r\n  showApplication: () => void\r\n}\r\n\r\nfunction useOnScreen(ref: React.MutableRefObject<Element | null>, load: () => void) {\r\n  let isIntersecting = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        isIntersecting.current = entry.isIntersecting;\r\n      }\r\n    )\r\n    setInterval(() => isIntersecting.current && load(), 700);\r\n    if (ref.current) {\r\n      observer.observe(ref.current)\r\n      return () => { observer.disconnect() }\r\n    }\r\n  }, [ref, load]);\r\n}\r\n\r\n\r\nexport default function JobsList(props: Props) {\r\n  const { jobPostings, isLoadingJobs, loadJobPostingsError, isEndOfJobsStream, loadMoreJobs } = useContext<ContextValue>(SearchContext);\r\n  const loadIndicatorRef = useRef<HTMLDivElement | null>(null);\r\n  useOnScreen(loadIndicatorRef, loadMoreJobs);\r\n\r\n  let jobs: JobPosting[] | null = jobPostings ? jobPostings : [];\r\n  if (isLoadingJobs && (jobs.length === 0)) {\r\n    const content = Array(15).fill(null).map((job, index) => renderJob(job, index, true, props.setSelectedJob, props.setSelectedDetailsJob, props.showApplication));\r\n    content.push(<div key={-1} ref={loadIndicatorRef} className=\"d-none\">---</div>);\r\n    return (\r\n      <div className=\"jobs-list-container\">\r\n        {content}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (loadJobPostingsError) {\r\n    return (\r\n      <Alert variant=\"danger\">Unable to find any search results. Please change your search criteria and try again.</Alert>\r\n    )\r\n  }\r\n  const content = jobs.map((job, index) => renderJob(job, index, false, props.setSelectedJob, props.setSelectedDetailsJob, props.showApplication));\r\n  let offset = content.length;\r\n  if (isLoadingJobs) {\r\n    Array(5).fill(null).map((job, index) => renderJob(job, offset + index, true, props.setSelectedJob, props.setSelectedDetailsJob, () => { })).map(entry => content.push(entry));\r\n    content.push(<div key={-1} ref={loadIndicatorRef}></div>);\r\n  }\r\n  else if (!isEndOfJobsStream) {\r\n    content.push(<div key={-1} ref={loadIndicatorRef}></div>);\r\n    Array(5).fill(null).map((job, index) => renderJob(job, offset + index, true, props.setSelectedJob, props.setSelectedDetailsJob, () => { })).map(entry => content.push(entry));\r\n  }\r\n  return (\r\n    <div className={\"jobs-list-container\"}>\r\n      {content}\r\n    </div>\r\n  )\r\n}\r\n\r\nlet renderJob = (job: JobPosting | null, key: number, isLoading: boolean, selectFunc: (job: JobPosting | null) => void, selectDetailsFunc: (job: JobPosting | null) => void, showApplication: () => void): ReactElement => {\r\n  const delayIndex = (key * 5) % 12;\r\n  const delayClass = (key === 0) ? \"\" : \"delay-\" + delayIndex;\r\n\r\n  let imgSrc = (job && !isLoading) ? (\"/uploads/\" + job.logo_file_name) : undefined;\r\n  let imgAlt = (job && !isLoading) ? `Company ${job.company}` : \"loading image\";\r\n  let title = (job && !isLoading) ? job.title : <>&nbsp;</>;\r\n  let company = (job && !isLoading) ? job.company : <>&nbsp;</>;\r\n  let age = (job && !isLoading) ? getDisplayAge(job.age_in_hours) : <>&nbsp;</>;\r\n  let positionType = (job && !isLoading) ? job.job_position_types.name : <>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n  let viewBtnText = \"Apply\";\r\n  let loadingClass = isLoading ? \"loading\" : \"\";\r\n  const onClickApply = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n    selectFunc(job);\r\n    showApplication();\r\n    e.stopPropagation();\r\n  };\r\n\r\n  return (\r\n    <SyntheticButton key={key} hoverClass=\"bg-light\" clickClass=\"jobs-bg-clicked\">\r\n      <Card id={\"jobs-list-item\" + key} className={\"jobs-list-item \" + loadingClass} onClick={(e) => selectDetailsFunc(job)}>\r\n        {isLoading && <div className=\"loading-indicator\"><div className={delayClass}></div></div>}\r\n        <object className=\"job-img\" data={imgSrc} type=\"image/png\">{imgAlt}</object>\r\n        <div className=\"jobs-list-item-primary\">\r\n          <span className=\"title\"><span>{title}</span></span>\r\n          <span className=\"sub-data\"><span>{company}</span></span>\r\n          <span className=\"sub-data\"><span>{age}</span></span>\r\n        </div>\r\n        <div className=\"d-none d-md-block\">\r\n          <span className=\"sub-data\">{positionType}</span>\r\n          <Button className=\"d-none d-lg-inline\" onClick={onClickApply}>{viewBtnText}</Button>\r\n        </div>\r\n      </Card>\r\n    </SyntheticButton>\r\n  )\r\n}","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner, faClock, faGlobe, faSearchLocation, faCalendarDay, faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Container, Row, Col, Button, Alert, Fade } from \"react-bootstrap\";\r\n\r\nimport { JobPosting, JobPostingDetails } from \"../../service/JobTypes\";\r\nimport { getDisplayAge } from \"../../Utils\";\r\nimport \"./application.css\";\r\n\r\ninterface Props {\r\n  details: JobPostingDetails[] | null,\r\n  job: JobPosting | null,\r\n  isLoading: boolean,\r\n  back: () => void\r\n}\r\n\r\nexport default function Application(props: Props) {\r\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n  const startApplication = useCallback(() => { setErrorMessage(\"This is a demo site. To have a custom built responsive website of your own, contact Darrien Richmond [darrien.richmond@gmail.com]\") }, [])\r\n  useEffect(() => { setErrorMessage(null) }, [props]);\r\n\r\n  return (\r\n    <div className=\"job-application-container\" >\r\n      {renderContent(props, errorMessage, startApplication)}\r\n    </div>\r\n  )\r\n}\r\nconst renderContent = (props: Props, errorMessage: string | null, startApplication: () => void) => {\r\n  if (!props.details || !props.job) {\r\n    if (props.isLoading) {\r\n      return (\r\n        <div className=\"loading-page\">\r\n          <FontAwesomeIcon icon={faSpinner} size=\"4x\" pulse></FontAwesomeIcon>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (<div />);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"job-application-content\">\r\n      <div className=\"job-application-back-button\">\r\n        <span onClick={props.back}><FontAwesomeIcon icon={faArrowLeft} /> Back to job postings</span>\r\n      </div>\r\n      <div className=\"job-application-logo\">\r\n        <img src={\"/uploads/\" + props.job.logo_file_name} alt={props.job.company + \" \" + props.job.title + \" logo\"} />\r\n      </div>\r\n      <div className=\"job-application-header\">\r\n        <h2>{props.job.title}</h2>\r\n        <h3>{props.job.company}</h3>\r\n        <Container fluid>\r\n          <Row className=\"job-application-sub-data\">\r\n            <Col className=\"ps-0\">\r\n              <div><FontAwesomeIcon icon={faClock} /><span className=\"ps-2\">{props.job.job_position_types.name}</span></div>\r\n              <div><FontAwesomeIcon icon={faSearchLocation} /><span className=\"ps-2\">{props.job.city}, {props.job.state}</span></div>\r\n            </Col>\r\n            <Col>\r\n              <div><FontAwesomeIcon icon={faGlobe} /><span className=\"ps-2\">{props.job.industry}</span></div>\r\n              <div><FontAwesomeIcon icon={faCalendarDay} /><span className=\"ps-2\">{getDisplayAge(props.job.age_in_hours)}</span></div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      <div className=\"job-application-description\">\r\n        <h3>Job Description</h3>\r\n        <p>{props.job.description}</p>\r\n        <ul>\r\n          {props.details.map(detail => <li>{detail.content}</li>)}\r\n        </ul>\r\n        <div className=\"job-application-footer\">\r\n          {\r\n            (() => {\r\n              if (errorMessage) {\r\n                return (<Alert variant=\"info\">{errorMessage}</Alert>)\r\n              } else {\r\n                return (<Button onClick={startApplication}>Apply</Button>);\r\n              }\r\n            })()\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nimport Details from \"./details\";\r\nimport SearchCriteria from \"./search-criteria\";\r\nimport JobsList from \"./jobs-list\";\r\nimport { Category, PositionType, JobPosting } from \"../service/JobTypes\";\r\nimport { useLoadJobPostingDetails } from \"../service/service\";\r\nimport Application from \"./application\";\r\n\r\ninterface Props {\r\n  categories: Category[] | null,\r\n  positionTypes: PositionType[] | null,\r\n  loadCategoriesError: Error | null,\r\n  selectedJob: JobPosting | null,\r\n  detailsJob: JobPosting | null,\r\n  loadPositionTypesError: Error | null,\r\n  forceCategoriesReload: () => void,\r\n  forcePositionTypesReload: () => void,\r\n  setSelectedJob: (job: JobPosting | null) => void,\r\n  setSelectedDetailsJob: (job: JobPosting | null) => void,\r\n  showApplication: () => void,\r\n  back: () => void\r\n}\r\n\r\nexport default function BoardContent(props: Props) {\r\n  const { data: additionalDetails, error: detailsError, loading: isDetailsLoading } = useLoadJobPostingDetails(props.selectedJob?.id);\r\n  const containerClass = \"job-board-sub-container h-100 \" + (Boolean(props.selectedJob) ? \" job-selected\" : \"\");\r\n\r\n  return (\r\n    <>\r\n      <Application job={props.selectedJob} details={isDetailsLoading ? null : additionalDetails} back={props.back} isLoading={isDetailsLoading} />\r\n      <Container fluid className={containerClass}>\r\n        <Row>\r\n          <Col lg=\"3\" xs=\"12\" className=\"h-100 p-0\">\r\n            <SearchCriteria\r\n              categories={props.categories}\r\n              positionTypes={props.positionTypes}\r\n              loadCategoriesError={props.loadCategoriesError}\r\n              loadPositionTypesError={props.loadPositionTypesError}\r\n              forceCategoriesReload={props.forceCategoriesReload}\r\n              forcePositionTypesReload={props.forcePositionTypesReload}\r\n            />\r\n          </Col>\r\n          <Col lg=\"6\" xs=\"12\"> <JobsList setSelectedJob={props.setSelectedJob} showApplication={props.showApplication} setSelectedDetailsJob={props.setSelectedDetailsJob} /> </Col>\r\n          <Col lg=\"3\" className=\"d-none d-lg-block h-100 p-0\"> <Details job={props.detailsJob} showApplication={props.showApplication} /> </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/Logo.7e7f488c.svg\";","import React, { useState, useEffect, useContext, useCallback } from \"react\";\r\n\r\nimport BoardContent from \"./board-content\"\r\nimport { SearchContext, ContextValue } from \"../service/search-context\";\r\nimport { Category, PositionType, JobPosting, JobPostingDetails } from \"../service/JobTypes\";\r\nimport Logo from \"../images/Logo.svg\";\r\nimport \"./job-board.css\";\r\n\r\ninterface Props {\r\n  categories: Category[] | null,\r\n  positionTypes: PositionType[] | null,\r\n  back: () => void,\r\n  loadCategoriesError: Error | null,\r\n  loadPositionTypesError: Error | null,\r\n  forceCategoriesReload: () => void,\r\n  forcePositionTypesReload: () => void\r\n}\r\n\r\nexport default function JobBoard(props: Props) {\r\n  const [selectedJob, setSelectedJob] = useState<JobPosting | null>(null);\r\n  const [detailsJob, setRawDetailsJob] = useState<JobPosting | null>(null);\r\n  const { selectedCategories, selectedPositionTypes, tmpSearchText } = useContext<ContextValue>(SearchContext);\r\n  const [isShowApplication, setShowApplication] = useState<boolean>(false);\r\n  const setDetailsJob = useCallback((job: JobPosting | null) => { setSelectedJob(job); setRawDetailsJob(job) }, []);\r\n  useEffect(() => {\r\n    setSelectedJob(null);\r\n    setRawDetailsJob(null);\r\n    setShowApplication(false);\r\n  }, [selectedCategories, selectedPositionTypes, tmpSearchText]);\r\n  const showApplication = useCallback(() => setShowApplication(true), []);\r\n\r\n  const containerClass = \"job-board-content\" + (Boolean(selectedJob) ? \" job-selected\" : \"\");\r\n  let back = () => {\r\n    if (Boolean(selectedJob)) {\r\n      setSelectedJob(null);\r\n      setShowApplication(false);\r\n    }\r\n    else {\r\n      props.back();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const showAppClass = isShowApplication ? \"application-ready\" : \"\";\r\n  return (\r\n    <div className={`job-board-container ${showAppClass}`}>\r\n      {renderHeader(Boolean(selectedJob), back)}\r\n      <div className={containerClass}>\r\n        <BoardContent {...props} selectedJob={selectedJob} setSelectedJob={setSelectedJob} back={back} showApplication={showApplication} setSelectedDetailsJob={setDetailsJob} detailsJob={detailsJob} />\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n\r\nconst renderHeader = (isSelectedJob: boolean, onClick: () => void) => {\r\n  const headerClass = \"job-board-header user-select-none \" + ((isSelectedJob) ? \"job-selected\" : \"\");\r\n  return (\r\n    <div className={headerClass}>\r\n      <div>\r\n        <img src={Logo} alt=\"mock jobs board logo\" className=\"d-none d-sm-inline\" onClick={onClick} />\r\n        <div className=\"job-board-header-text\" onClick={onClick}>\r\n          <h1>Mock Jobs Board</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { Element, scroller } from 'react-scroll';\n\nimport Home from './home';\nimport JobBoard from \"./job-board\";\nimport { useLoadCategories, useLoadPositionTypes } from './service/service';\nimport { Category } from \"./service/JobTypes\";\nimport { SearchContext, ContextValue } from './service/search-context';\nimport { debounce } from 'lodash';\n\nconst MAX_HOME_CATEGORIES = 5;\n\ninterface Page {\n  HOME: number,\n  BOARD: number\n}\n\nfunction useOnResize(callback: () => void) {\n  useEffect(() => {\n    window.addEventListener(\"resize\", callback);\n    return () => window.removeEventListener(\"resize\", callback);\n  }, [callback]);\n}\n\nfunction App() {\n  //TODO Extract state into a context.\n  let { data: categories, error: loadCategoriesError, forceReload: forceCategoriesReload } = useLoadCategories();\n  let { data: positionTypes, error: loadPositionTypesError, forceReload: forcePositionTypesReload } = useLoadPositionTypes();\n  let { clearPositionTypes, setCategory } = useContext<ContextValue>(SearchContext);\n  let [activePage, setActivePage] = useState<keyof Page>(\"HOME\");\n\n  let debouncedScrollToActivePage = useCallback(debounce(() => {\n    if (activePage === \"BOARD\") {\n      scrollToElementId(\"jobBoardScrollElement\");\n    }\n    else {\n      scrollToElementId(\"appPageScrollElement\");\n    }\n  }, 300), [activePage]);\n\n  const scrollToElementId = (elementId: string) => {\n    scroller.scrollTo(elementId, {\n      duration: 500,\n      smooth: true,\n    });\n  }\n  useOnResize(debouncedScrollToActivePage);\n\n\n  const addCategoryAndScroll = (cat: Category | null) => {\n    setCategory(cat);\n    clearPositionTypes();\n    scrollToBoard();\n  }\n\n  const scrollToTop = () => {\n    scrollToElementId(\"appPageScrollElement\");\n    setActivePage(\"HOME\");\n  }\n\n  const scrollToBoard = () => {\n    scrollToElementId(\"jobBoardScrollElement\");\n    setActivePage(\"BOARD\");\n  }\n\n  const topCategories = categories == null ? Array(MAX_HOME_CATEGORIES).fill(null) : categories;\n\n  return (\n    <main>\n      <Element name=\"appPageScrollElement\">\n        <div className=\"app-page\">\n          <Home categories={topCategories.slice(0, MAX_HOME_CATEGORIES)} changeCategory={addCategoryAndScroll} />\n        </div>\n      </Element>\n      <Element name=\"jobBoardScrollElement\">\n        <div className=\"app-page\">\n          <JobBoard\n            categories={categories}\n            positionTypes={positionTypes}\n            loadCategoriesError={loadCategoriesError}\n            loadPositionTypesError={loadPositionTypesError}\n            forceCategoriesReload={forceCategoriesReload}\n            forcePositionTypesReload={forcePositionTypesReload}\n            back={scrollToTop}\n          />\n        </div>\n      </Element>\n    </main >\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport App from './App';\nimport { SearchProvider } from './service/search-context';\n\nconst MAX_RESULTS_PER_PAGE = 15;\nconst SEARCH_DEBOUNCE_MILLISECONDS = 400;\n\nReactDOM.render(\n  <React.StrictMode>\n    <SearchProvider maxResultCount={MAX_RESULTS_PER_PAGE} debounceInMilliseconds={SEARCH_DEBOUNCE_MILLISECONDS}>\n      <App />\n    </SearchProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}